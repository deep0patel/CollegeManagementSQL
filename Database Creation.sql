USE CRS;

DROP TABLE IF EXISTS STUDENT_SCHOLARSHIPS;

DROP TABLE IF EXISTS SCHOLARSHIPS;

DROP TABLE IF EXISTS RESIDENCE_STUDENT;

DROP TABLE IF EXISTS RESIDENCE;

DROP TABLE IF EXISTS STUDENT_INSTRUCTOR_COURSE;

DROP TABLE IF EXISTS INSTRUCTOR_COURSE;

DROP TABLE IF EXISTS COURSE_PROGRAM;

DROP TABLE IF EXISTS STUDENT;

DROP TABLE IF EXISTS STUDENT_JOBS;

DROP TABLE IF EXISTS PROGRAM;

DROP TABLE IF EXISTS COURSE_PREREQUISITES;

DROP TABLE IF EXISTS COURSE;

DROP TABLE IF EXISTS INSTRUCTOR;

DROP TABLE Department;


CREATE TABLE DEPARTMENT(
	DEPARTMENT_CODE VARCHAR(15),
    DEPARTMENT_NAME VARCHAR(50),
   
    
    PRIMARY KEY (DEPARTMENT_CODE)    
);

CREATE TABLE INSTRUCTOR(
INSTRUCTOR_ID INT auto_increment,
FIRST_NAME VARCHAR(30),
LAST_NAME VARCHAR(30),
PHONE_NO  VARCHAR(10),
ADDRESS  VARCHAR(100),
EMAIL  VARCHAR(30),
SALARY int NOT NULL,
DEPARTMENT_CODE VARCHAR(15),
JOINING_DATE DATE,

PRIMARY KEY (INSTRUCTOR_ID),
FOREIGN KEY (DEPARTMENT_CODE) REFERENCES DEPARTMENT(DEPARTMENT_CODE) 
);



CREATE TABLE COURSE(
   COURSE_CODE VARCHAR(20),
   COURSE_NAME VARCHAR(50) NOT NULL,
   CREDITS INT NOT NULL,
   TEXT_BOOK VARCHAR(50),
   
   PRIMARY KEY(COURSE_CODE) 
);

CREATE TABLE COURSE_PREREQUISITES(
   PREREQUISITES_COURSE_CODE VARCHAR(20),
   COURSE_CODE VARCHAR(20),
   DETAILS varchar(100),
   
   PRIMARY KEY (PREREQUISITES_COURSE_CODE,COURSE_CODE),
   FOREIGN KEY (COURSE_CODE) REFERENCES  COURSE(COURSE_CODE),
   FOREIGN KEY (PREREQUISITES_COURSE_CODE) REFERENCES  COURSE(COURSE_CODE)
);
   



CREATE TABLE PROGRAM(
PROGRAM_CODE VARCHAR(20),
PROGRAM_NAME VARCHAR(70) NOT NULL,
PROGRAM_COORDINATOR INT,
DEPARTMENT_CODE VARCHAR(15) NOT NULL,

PRIMARY KEY(PROGRAM_CODE),
FOREIGN KEY (PROGRAM_COORDINATOR) REFERENCES  INSTRUCTOR(INSTRUCTOR_ID),
FOREIGN KEY (DEPARTMENT_CODE) REFERENCES  DEPARTMENT(DEPARTMENT_CODE)

);

CREATE TABLE STUDENT_JOBS(
JOB_ID INT AUTO_INCREMENT,
JOB_NAME VARCHAR(30) NOT NULL,
SALARY FLOAT NOT NULL,
MIN_HOURS INT NOT NULL,

PRIMARY KEY (JOB_ID)
);

CREATE TABLE STUDENT(
	STUDENT_ID INT AUTO_INCREMENT, 
    FIRST_NAME VARCHAR(25), 
    LAST_NAME VARCHAR(25),
    CELL_PHONE_NUMBER VARCHAR(10),
    HOME_PHONE_NUMBER VARCHAR(10),
    ADDRESS VARCHAR(100),
    EMAIL VARCHAR(50),
    DATE_OF_BIRTH DATE,
    ACCOUNT_BALANCE INT,
    ENROLLMENT_DATE DATE,
    PROGRAM_CODE VARCHAR(20),
    JOB_ID INT DEFAULT(NULL),
    
    PRIMARY KEY (STUDENT_ID),
    FOREIGN KEY (PROGRAM_CODE) REFERENCES  PROGRAM(PROGRAM_CODE),
    FOREIGN KEY (JOB_ID) REFERENCES STUDENT_JOBS(JOB_ID)  
    
);

CREATE TABLE COURSE_PROGRAM(
COURSE_PROGRAM INT AUTO_INCREMENT,
COURSE_CODE VARCHAR(20),
PROGRAM_CODE VARCHAR(20),
SEMESTER_NO INT NOT NULL,

PRIMARY KEY (COURSE_PROGRAM),
FOREIGN KEY (COURSE_CODE) REFERENCES COURSE(COURSE_CODE),
FOREIGN KEY (PROGRAM_CODE) REFERENCES PROGRAM(PROGRAM_CODE)
); 

CREATE TABLE INSTRUCTOR_COURSE(
INSTRUCTOR_COURSE_ID INT AUTO_INCREMENT,
INSTRUCTOR_ID INT,
COURSE_CODE VARCHAR(20),
TERM VARCHAR(10),

PRIMARY KEY (INSTRUCTOR_COURSE_ID),
FOREIGN KEY (INSTRUCTOR_ID) REFERENCES INSTRUCTOR(INSTRUCTOR_ID), 
FOREIGN KEY (COURSE_CODE) REFERENCES  COURSE(COURSE_CODE)

);

CREATE TABLE STUDENT_INSTRUCTOR_COURSE(
STUDENT_INSTRUCTOR_COURSE_ID INT AUTO_INCREMENT,
STUDENT_ID INT,
INSTRUCTOR_COURSE_ID INT,
GRADES VARCHAR(10),

PRIMARY KEY (STUDENT_INSTRUCTOR_COURSE_ID),
FOREIGN KEY (STUDENT_ID) REFERENCES STUDENT(STUDENT_ID), 
FOREIGN KEY (INSTRUCTOR_COURSE_ID) REFERENCES  INSTRUCTOR_COURSE(INSTRUCTOR_COURSE_ID)
);

CREATE TABLE RESIDENCE (
RESIDENCE_ID VARCHAR(20),

PRIMARY KEY (RESIDENCE_ID)
);

CREATE TABLE RESIDENCE_STUDENT(
RESIDENCE_STUDENT_ID INT,
STUDENT_ID INT,
RESIDENCE_ID VARCHAR(20),

PRIMARY KEY(RESIDENCE_STUDENT_ID),
FOREIGN KEY (STUDENT_ID) REFERENCES STUDENT(STUDENT_ID),
FOREIGN KEY (RESIDENCE_ID) REFERENCES RESIDENCE(RESIDENCE_ID)

);

CREATE TABLE SCHOLARSHIPS(
SCHOLARSHIP_ID INT AUTO_INCREMENT,
SCHOLARSHIP_NAME VARCHAR(50),
SCHOLARSHIP_AMOUNT VARCHAR(30),

PRIMARY KEY (SCHOLARSHIP_ID)
);

CREATE TABLE STUDENT_SCHOLARSHIPS(
STUDENT_SCHOLARSHIPS_ID INT,
STUDENT_ID INT,
SCHOLARSHIP_ID INT,
APPLICATION_STATUS VARCHAR(10),
APPLICATION_DATE DATE,

PRIMARY KEY (STUDENT_SCHOLARSHIPS_ID),
FOREIGN KEY (STUDENT_ID) REFERENCES STUDENT(STUDENT_ID),
FOREIGN KEY (SCHOLARSHIP_ID) REFERENCES SCHOLARSHIPS(SCHOLARSHIP_ID)

);


